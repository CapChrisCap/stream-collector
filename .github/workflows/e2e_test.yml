name: "e2e test"

on:
  workflow_run:
    workflows: ["build"]
    types:
      - completed

#on: push

jobs:
  run_e2e:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - uses: coursier/cache-action@v3
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Get current version
        id: ver
        run: |
          export PROJECT_VERSION=$(grep 'version :=' build.sbt|awk -F'"' '{print $2}')
          echo "::set-output name=project_version::$PROJECT_VERSION"
      - name: Get tf modules branch
        id: branch
        run: |
          if [[ ${{ steps.ver.outputs.project_version }} =~ '\d+.\d+.\d+' ]]
            then
              export BRANCH=master
            else
              export BRANCH="feature/collector/${{ steps.ver.outputs.project_version }}"
          fi
          echo "::set-output name=branch::$BRANCH"
      - name: invoke deployment service
        id: invoke
        run: |
          output=$(curl -X POST "https://deployment-service-next.snplow.net/v1/deployment" \
          -H  "accept: application/json" \
          -H  "X-Token: ${{ secrets.API_DEPLOY_TOKEN }}" \
          -H  "Content-Type: application/json" \
          -d '{
            "type": "tests/gcp_e2e",
            "version": "0.1.0",
            "customer": "gcp_sandbox",
            "environment": "${{ steps.ver.outputs.project_version }}",
            "dry_run": false,
            "github_ref": "${{ steps.branch.outputs.branch }}"
          }')
          echo $output
          [[ "$output" =~ 'https' ]] || exit 1
          export JOB=$(echo $output|awk -F'"' '{ print $4 }')
          echo "::set-output name=job::$JOB"
      - name: poll the result
        run: |
          for attempt in {1..100}
          do
            output=$(curl -X GET "https://deployment-service-next.snplow.net/v1/deployment/${{ steps.invoke.outputs.job }}" \
               -H  "accept: application/json"  \
               -H  "X-Token: ${{ secrets.API_DEPLOY_TOKEN }}" \
               -H  "Content-Type: application/json")
            if [[ $output =~ 'running' ]]
            then
              sleep 10
            else
              if [[ $output =~ 'failed' ]]
                then
                  echo "Job failed"
                  exit 1
                else
                  if [[ $output =~ 'complete' ]]
                    then
                      echo "Job complete"
                    else
                      echo "Unknown response $output"
                      exit 1
                  fi
                  break
              fi
            fi
          done
